import { NextResponse } from 'next/server';
import { supabase } from '@/utils/supabaseClient';

export const dynamic = 'force-dynamic'; // This ensures the route is always dynamic

export async function POST(request) {
  try {
    console.log('Sign-up API called');
    const { email, password, displayName } = await request.json();
    console.log('Email provided:', email);
    console.log('Display name provided:', displayName);

    // Validate inputs
    if (!email || !password) {
      console.log('Missing email or password');
      return NextResponse.json(
        { error: 'Email and password are required' },
        { status: 400 }
      );
    }

    // First check if the user_profiles table exists
    console.log('Checking if user_profiles table exists...');
    try {
      const { data: checkData, error: checkError } = await supabase
        .from('user_profiles')
        .select('id')
        .limit(1);
      
      // If we get a relation does not exist error, the table doesn't exist
      if (checkError && checkError.code === '42P01') {
        console.log('user_profiles table does not exist, creating it...');
        
        // Try to create the table using the database API
        const createTableResponse = await fetch('http://localhost:3000/api/database/create-tables', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
        });
        
        if (!createTableResponse.ok) {
          console.error('Failed to create tables');
          return NextResponse.json({
            error: 'Database setup required',
            details: 'The user_profiles table does not exist and could not be created automatically.',
            message: 'Please visit the database setup page to initialize your database.',
            setupUrl: '/setup/database'
          }, { status: 500 });
        }
        
        console.log('Tables created successfully');
      }
    } catch (tableCheckError) {
      console.error('Error checking user_profiles table:', tableCheckError);
      // Continue anyway, we'll handle errors later
    }

    // Now attempt to sign up the user
    console.log('Attempting to sign up with Supabase...');
    const { data, error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data: {
          display_name: displayName,
        },
      },
    });

    if (error) {
      console.error('Supabase auth error:', error);
      return NextResponse.json(
        { error: error.message },
        { status: 400 }
      );
    }

    console.log('Supabase auth response:', JSON.stringify(data, null, 2));

    // Create user profile
    if (data?.user) {
      console.log('Creating user profile for:', data.user.id);
      
      try {
        // Insert the user profile
        const profileData = {
          id: data.user.id,
          display_name: displayName || email.split('@')[0],
          role: 'user',
        };
        
        console.log('Profile data to insert:', profileData);
        
        const { data: insertData, error: profileError } = await supabase
          .from('user_profiles')
          .insert([profileData])
          .select();

        if (profileError) {
          console.error('Error creating profile:', profileError);
          
          // If we get a foreign key violation, it might be because the user already exists
          if (profileError.code === '23505') {
            console.log('User profile already exists, continuing...');
          } else {
            return NextResponse.json(
              { error: 'Failed to create user profile', details: profileError.message },
              { status: 500 }
            );
          }
        } else {
          console.log('Profile created successfully:', insertData);
        }
      } catch (profileError) {
        console.error('Exception creating profile:', profileError);
        return NextResponse.json(
          { error: 'Failed to create user profile', details: profileError.message || 'Unknown error' },
          { status: 500 }
        );
      }
    }

    console.log('Sign-up successful for user:', data.user.id);
    return NextResponse.json({
      user: data.user,
      message: 'User created successfully'
    });
  } catch (error) {
    console.error('Exception in sign-up API:', error);
    return NextResponse.json(
      { error: 'Internal server error: ' + (error.message || 'Unknown error') },
      { status: 500 }
    );
  }
}
